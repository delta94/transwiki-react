{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "authtranswiki5ecd37ffUserPoolId": {
      "Type": "String",
      "Default": "authtranswiki5ecd37ffUserPoolId"
    },

    "authtranswiki5ecd37ffIdentityPoolId": {
      "Type": "String",
      "Default": "authtranswiki5ecd37ffIdentityPoolId"
    },

    "authtranswiki5ecd37ffAppClientID": {
      "Type": "String",
      "Default": "authtranswiki5ecd37ffAppClientID"
    },
    "authtranswiki5ecd37ffAppClientIDWeb": {
      "Type": "String",
      "Default": "authtranswiki5ecd37ffAppClientIDWeb"
    },
    "AuthRoleArn": {
      "Type": "String"
    },
    "UnauthRoleArn": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "CreatorsGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "GroupName": "Creators",
        "Precedence": 1,

        "RoleArn": {
          "Fn::GetAtt": ["CreatorsGroupRole", "Arn"]
        },

        "UserPoolId": {
          "Ref": "authtranswiki5ecd37ffUserPoolId"
        }
      }
    },

    "CreatorsGroupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "authtranswiki5ecd37ffUserPoolId"
              },
              "-CreatorsGroupRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "authtranswiki5ecd37ffIdentityPoolId"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        }
      }
    },

    "AdminGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "GroupName": "Admin",
        "Precedence": 2,

        "RoleArn": {
          "Fn::GetAtt": ["AdminGroupRole", "Arn"]
        },

        "UserPoolId": {
          "Ref": "authtranswiki5ecd37ffUserPoolId"
        }
      }
    },

    "AdminGroupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "authtranswiki5ecd37ffUserPoolId"
              },
              "-AdminGroupRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "authtranswiki5ecd37ffIdentityPoolId"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        }
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {},
            {
              "Fn::Join": [
                "",
                [
                  "transwiki5ecd37ff",
                  "-ExecutionRole-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "UserGroupLogPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "UserGroupExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:SetIdentityPoolRoles",
                    "cognito-identity:ListIdentityPools",
                    "cognito-identity:describeIdentityPool"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "UserGroupPassRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["iam:PassRole"],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RoleMapFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": ["LambdaExecutionRole"],
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const response = require('cfn-response');",
                "const AWS = require('aws-sdk');",
                "exports.handler = (event, context) => {",
                "if (event.RequestType == 'Delete') {",
                "    response.send(event, context, response.SUCCESS, {message: 'Request type delete'})",
                "};",
                "if (event.RequestType == 'Create' || event.RequestType == 'Update') {",
                "    let { identityPoolId, appClientID, appClientIDWeb, userPoolId, region }  = event.ResourceProperties;",
                "    try {",
                "       const cognitoidentity = new AWS.CognitoIdentity();",
                "       let params = {",
                "           IdentityPoolId: identityPoolId,",
                "           Roles: {",
                "               'authenticated': event.ResourceProperties.AuthRoleArn,",
                "               'unauthenticated': event.ResourceProperties.UnauthRoleArn,",
                "           },",
                "           RoleMappings: {}",
                "       };",
                "       if (appClientIDWeb) {",
                "           params.RoleMappings[`cognito-idp.${region}.amazonaws.com/${userPoolId}:${appClientIDWeb}`] = {",
                "               Type: 'Token',",
                "               AmbiguousRoleResolution: 'AuthenticatedRole',",
                "           }",
                "       }",
                "       if (appClientID) {",
                "           params.RoleMappings[`cognito-idp.${region}.amazonaws.com/${userPoolId}:${appClientID}`] = {",
                "               Type: 'Token',",
                "               AmbiguousRoleResolution: 'AuthenticatedRole',",
                "           }",
                "       }",
                "    cognitoidentity.setIdentityPoolRoles(params).promise();",
                "    response.send(event, context, response.SUCCESS, {message: 'Successfully updated identity pool.'})",
                "    } catch(err) {",

                "        response.send(event, context, response.FAILED, {message: 'Error updating identity pool'});",
                "    }",
                "   };",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs10.x",
        "Timeout": "300",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        }
      }
    },
    "RoleMapFunctionInput": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["RoleMapFunction", "Arn"]
        },
        "AuthRoleArn": {
          "Ref": "AuthRoleArn"
        },
        "UnauthRoleArn": {
          "Ref": "UnauthRoleArn"
        },
        "identityPoolId": {
          "Ref": "authtranswiki5ecd37ffIdentityPoolId"
        },
        "userPoolId": {
          "Ref": "authtranswiki5ecd37ffUserPoolId"
        },
        "appClientIDWeb": {
          "Ref": "authtranswiki5ecd37ffAppClientIDWeb"
        },
        "appClientID": {
          "Ref": "authtranswiki5ecd37ffAppClientID"
        },
        "region": {
          "Ref": "AWS::Region"
        },
        "env": {
          "Ref": "env"
        }
      },
      "DependsOn": ["RoleMapFunction"]
    }
  },

  "Outputs": {
    "CreatorsGroupRole": {
      "Value": {
        "Fn::GetAtt": ["CreatorsGroupRole", "Arn"]
      }
    },

    "AdminGroupRole": {
      "Value": {
        "Fn::GetAtt": ["AdminGroupRole", "Arn"]
      }
    }
  }
}
